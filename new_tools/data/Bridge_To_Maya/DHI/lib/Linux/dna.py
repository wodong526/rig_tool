# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pydna')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pydna')
    _pydna = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pydna', [dirname(__file__)])
        except ImportError:
            import _pydna
            return _pydna
        try:
            _mod = imp.load_module('_pydna', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pydna = swig_import_helper()
    del swig_import_helper
else:
    import _pydna
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def __managed_init(self, *args, **kwargs):
    self._args = args
    self._kwargs = kwargs

class MemoryResource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryResource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryResource, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydna.delete_MemoryResource
    __del__ = lambda self: None

    def allocate(self, size, alignment):
        return _pydna.MemoryResource_allocate(self, size, alignment)

    def deallocate(self, ptr, size, alignment):
        return _pydna.MemoryResource_deallocate(self, ptr, size, alignment)
MemoryResource_swigregister = _pydna.MemoryResource_swigregister
MemoryResource_swigregister(MemoryResource)

class AlignedMemoryResource(MemoryResource):
    __swig_setmethods__ = {}
    for _s in [MemoryResource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlignedMemoryResource, name, value)
    __swig_getmethods__ = {}
    for _s in [MemoryResource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AlignedMemoryResource, name)
    __repr__ = _swig_repr

    def allocate(self, size, alignment):
        return _pydna.AlignedMemoryResource_allocate(self, size, alignment)

    def deallocate(self, ptr, size, alignment):
        return _pydna.AlignedMemoryResource_deallocate(self, ptr, size, alignment)

    def __init__(self):
        this = _pydna.new_AlignedMemoryResource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pydna.delete_AlignedMemoryResource
    __del__ = lambda self: None
AlignedMemoryResource_swigregister = _pydna.AlignedMemoryResource_swigregister
AlignedMemoryResource_swigregister(AlignedMemoryResource)

class ArenaMemoryResource(MemoryResource):
    __swig_setmethods__ = {}
    for _s in [MemoryResource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArenaMemoryResource, name, value)
    __swig_getmethods__ = {}
    for _s in [MemoryResource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArenaMemoryResource, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pydna.delete_ArenaMemoryResource
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _pydna.new_ArenaMemoryResource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def allocate(self, size, alignment):
        return _pydna.ArenaMemoryResource_allocate(self, size, alignment)

    def deallocate(self, ptr, size, alignment):
        return _pydna.ArenaMemoryResource_deallocate(self, ptr, size, alignment)

    def getUpstreamMemoryResource(self):
        return _pydna.ArenaMemoryResource_getUpstreamMemoryResource(self)
ArenaMemoryResource_swigregister = _pydna.ArenaMemoryResource_swigregister
ArenaMemoryResource_swigregister(ArenaMemoryResource)

class DefaultMemoryResource(MemoryResource):
    __swig_setmethods__ = {}
    for _s in [MemoryResource]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultMemoryResource, name, value)
    __swig_getmethods__ = {}
    for _s in [MemoryResource]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultMemoryResource, name)
    __repr__ = _swig_repr

    def allocate(self, size, alignment):
        return _pydna.DefaultMemoryResource_allocate(self, size, alignment)

    def deallocate(self, ptr, size, alignment):
        return _pydna.DefaultMemoryResource_deallocate(self, ptr, size, alignment)

    def __init__(self):
        this = _pydna.new_DefaultMemoryResource()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pydna.delete_DefaultMemoryResource
    __del__ = lambda self: None
DefaultMemoryResource_swigregister = _pydna.DefaultMemoryResource_swigregister
DefaultMemoryResource_swigregister(DefaultMemoryResource)

class StatusCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatusCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StatusCode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["code"] = _pydna.StatusCode_code_set
    __swig_getmethods__["code"] = _pydna.StatusCode_code_get
    if _newclass:
        code = _swig_property(_pydna.StatusCode_code_get, _pydna.StatusCode_code_set)
    __swig_setmethods__["message"] = _pydna.StatusCode_message_set
    __swig_getmethods__["message"] = _pydna.StatusCode_message_get
    if _newclass:
        message = _swig_property(_pydna.StatusCode_message_get, _pydna.StatusCode_message_set)

    def __init__(self):
        this = _pydna.new_StatusCode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pydna.delete_StatusCode
    __del__ = lambda self: None
StatusCode_swigregister = _pydna.StatusCode_swigregister
StatusCode_swigregister(StatusCode)

class Status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Status, name)
    __repr__ = _swig_repr
    if _newclass:
        isOk = staticmethod(_pydna.Status_isOk)
    else:
        isOk = _pydna.Status_isOk
    if _newclass:
        get = staticmethod(_pydna.Status_get)
    else:
        get = _pydna.Status_get

    def __init__(self):
        this = _pydna.new_Status()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pydna.delete_Status
    __del__ = lambda self: None
Status_swigregister = _pydna.Status_swigregister
Status_swigregister(Status)

def Status_isOk():
    return _pydna.Status_isOk()
Status_isOk = _pydna.Status_isOk

def Status_get():
    return _pydna.Status_get()
Status_get = _pydna.Status_get

class Readable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Readable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Readable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def read(self, *args):
        return _pydna.Readable_read(self, *args)
Readable_swigregister = _pydna.Readable_swigregister
Readable_swigregister(Readable)

class Writable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Writable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Writable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def write(self, *args):
        return _pydna.Writable_write(self, *args)
Writable_swigregister = _pydna.Writable_swigregister
Writable_swigregister(Writable)

class Seekable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Seekable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Seekable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def tell(self):
        return _pydna.Seekable_tell(self)

    def seek(self, position):
        return _pydna.Seekable_seek(self, position)
Seekable_swigregister = _pydna.Seekable_swigregister
Seekable_swigregister(Seekable)

class Openable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Openable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Openable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def open(self):
        return _pydna.Openable_open(self)
Openable_swigregister = _pydna.Openable_swigregister
Openable_swigregister(Openable)

class Closeable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Closeable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Closeable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def close(self):
        return _pydna.Closeable_close(self)
Closeable_swigregister = _pydna.Closeable_swigregister
Closeable_swigregister(Closeable)

class Controllable(Openable, Closeable):
    __swig_setmethods__ = {}
    for _s in [Openable, Closeable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Controllable, name, value)
    __swig_getmethods__ = {}
    for _s in [Openable, Closeable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Controllable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
Controllable_swigregister = _pydna.Controllable_swigregister
Controllable_swigregister(Controllable)

class Bounded(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bounded, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bounded, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def size(self):
        return _pydna.Bounded_size(self)
Bounded_swigregister = _pydna.Bounded_swigregister
Bounded_swigregister(Bounded)

class Buffered(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffered, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffered, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def flush(self):
        return _pydna.Buffered_flush(self)
Buffered_swigregister = _pydna.Buffered_swigregister
Buffered_swigregister(Buffered)

class Resizable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Resizable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Resizable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def resize(self, size):
        return _pydna.Resizable_resize(self, size)
Resizable_swigregister = _pydna.Resizable_swigregister
Resizable_swigregister(Resizable)

class BoundedIOStream(Controllable, Readable, Writable, Seekable, Bounded):
    __swig_setmethods__ = {}
    for _s in [Controllable, Readable, Writable, Seekable, Bounded]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundedIOStream, name, value)
    __swig_getmethods__ = {}
    for _s in [Controllable, Readable, Writable, Seekable, Bounded]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundedIOStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydna.delete_BoundedIOStream
    __del__ = lambda self: None
BoundedIOStream_swigregister = _pydna.BoundedIOStream_swigregister
BoundedIOStream_swigregister(BoundedIOStream)
cvar = _pydna.cvar
BoundedIOStream.OpenError = _pydna.cvar.BoundedIOStream_OpenError
BoundedIOStream.ReadError = _pydna.cvar.BoundedIOStream_ReadError
BoundedIOStream.WriteError = _pydna.cvar.BoundedIOStream_WriteError
BoundedIOStream.AlreadyOpenError = _pydna.cvar.BoundedIOStream_AlreadyOpenError
BoundedIOStream.SeekError = _pydna.cvar.BoundedIOStream_SeekError

AccessMode_Read = _pydna.AccessMode_Read
AccessMode_Write = _pydna.AccessMode_Write
AccessMode_ReadWrite = _pydna.AccessMode_ReadWrite
OpenMode_Binary = _pydna.OpenMode_Binary
OpenMode_Text = _pydna.OpenMode_Text
class FileStream(BoundedIOStream):
    __swig_setmethods__ = {}
    for _s in [BoundedIOStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStream, name, value)
    __swig_getmethods__ = {}
    for _s in [BoundedIOStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pydna.FileStream_create)
    else:
        create = _pydna.FileStream_create
    if _newclass:
        destroy = staticmethod(_pydna.FileStream_destroy)
    else:
        destroy = _pydna.FileStream_destroy
    __swig_destroy__ = _pydna.delete_FileStream
    __del__ = lambda self: None
FileStream_swigregister = _pydna.FileStream_swigregister
FileStream_swigregister(FileStream)

def FileStream_create(path, accessMode, openMode, memRes=None):
    return _pydna.FileStream_create(path, accessMode, openMode, memRes)
FileStream_create = _pydna.FileStream_create

def FileStream_destroy(instance):
    return _pydna.FileStream_destroy(instance)
FileStream_destroy = _pydna.FileStream_destroy

class MemoryMappedFileStream(BoundedIOStream, Buffered, Resizable):
    __swig_setmethods__ = {}
    for _s in [BoundedIOStream, Buffered, Resizable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryMappedFileStream, name, value)
    __swig_getmethods__ = {}
    for _s in [BoundedIOStream, Buffered, Resizable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryMappedFileStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pydna.MemoryMappedFileStream_create)
    else:
        create = _pydna.MemoryMappedFileStream_create
    if _newclass:
        destroy = staticmethod(_pydna.MemoryMappedFileStream_destroy)
    else:
        destroy = _pydna.MemoryMappedFileStream_destroy
    __swig_destroy__ = _pydna.delete_MemoryMappedFileStream
    __del__ = lambda self: None
MemoryMappedFileStream_swigregister = _pydna.MemoryMappedFileStream_swigregister
MemoryMappedFileStream_swigregister(MemoryMappedFileStream)

def MemoryMappedFileStream_create(path, accessMode, memRes=None):
    return _pydna.MemoryMappedFileStream_create(path, accessMode, memRes)
MemoryMappedFileStream_create = _pydna.MemoryMappedFileStream_create

def MemoryMappedFileStream_destroy(instance):
    return _pydna.MemoryMappedFileStream_destroy(instance)
MemoryMappedFileStream_destroy = _pydna.MemoryMappedFileStream_destroy

class MemoryStream(BoundedIOStream):
    __swig_setmethods__ = {}
    for _s in [BoundedIOStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryStream, name, value)
    __swig_getmethods__ = {}
    for _s in [BoundedIOStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryStream, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pydna.MemoryStream_create)
    else:
        create = _pydna.MemoryStream_create
    if _newclass:
        destroy = staticmethod(_pydna.MemoryStream_destroy)
    else:
        destroy = _pydna.MemoryStream_destroy
    __swig_destroy__ = _pydna.delete_MemoryStream
    __del__ = lambda self: None
MemoryStream_swigregister = _pydna.MemoryStream_swigregister
MemoryStream_swigregister(MemoryStream)

def MemoryStream_create(*args):
    return _pydna.MemoryStream_create(*args)
MemoryStream_create = _pydna.MemoryStream_create

def MemoryStream_destroy(instance):
    return _pydna.MemoryStream_destroy(instance)
MemoryStream_destroy = _pydna.MemoryStream_destroy


FileStream.__new__= staticmethod(lambda cls, *args, **kwargs: FileStream_create(*args, **kwargs))
FileStream.__del__= lambda instance: FileStream_destroy(instance)
FileStream.__init__ = __managed_init
del FileStream.create
del FileStream.destroy


MemoryMappedFileStream.__new__= staticmethod(lambda cls, *args, **kwargs: MemoryMappedFileStream_create(*args, **kwargs))
MemoryMappedFileStream.__del__= lambda instance: MemoryMappedFileStream_destroy(instance)
MemoryMappedFileStream.__init__ = __managed_init
del MemoryMappedFileStream.create
del MemoryMappedFileStream.destroy


MemoryStream.__new__= staticmethod(lambda cls, *args, **kwargs: MemoryStream_create(*args, **kwargs))
MemoryStream.__del__= lambda instance: MemoryStream_destroy(instance)
MemoryStream.__init__ = __managed_init
del MemoryStream.create
del MemoryStream.destroy


FileStream.AccessMode_Read = AccessMode_Read
FileStream.AccessMode_Write = AccessMode_Write
FileStream.AccessMode_ReadWrite = AccessMode_ReadWrite

FileStream.OpenMode_Binary = OpenMode_Binary
FileStream.OpenMode_Text = OpenMode_Text

MemoryMappedFileStream.AccessMode_Read = AccessMode_Read
MemoryMappedFileStream.AccessMode_Write = AccessMode_Write
MemoryMappedFileStream.AccessMode_ReadWrite = AccessMode_ReadWrite

class StringView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringView, name)
    __repr__ = _swig_repr

    def c_str(self):
        return _pydna.StringView_c_str(self)

    def __ref__(self):
        return _pydna.StringView___ref__(self)

    def __init__(self):
        this = _pydna.new_StringView()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pydna.delete_StringView
    __del__ = lambda self: None
StringView_swigregister = _pydna.StringView_swigregister
StringView_swigregister(StringView)


def __add__(*args):
    return _pydna.__add__(*args)
__add__ = _pydna.__add__

def __sub__(*args):
    return _pydna.__sub__(*args)
__sub__ = _pydna.__sub__

def __mul__(*args):
    return _pydna.__mul__(*args)
__mul__ = _pydna.__mul__

def __truediv__(*args):
    return _pydna.__truediv__(*args)
__truediv__ = _pydna.__truediv__

def __eq__(*args):
    return _pydna.__eq__(*args)
__eq__ = _pydna.__eq__

def __ne__(*args):
    return _pydna.__ne__(*args)
__ne__ = _pydna.__ne__
DataLayer_Descriptor = _pydna.DataLayer_Descriptor
DataLayer_Definition = _pydna.DataLayer_Definition
DataLayer_Behavior = _pydna.DataLayer_Behavior
DataLayer_Geometry = _pydna.DataLayer_Geometry
DataLayer_GeometryWithoutBlendShapes = _pydna.DataLayer_GeometryWithoutBlendShapes
DataLayer_AllWithoutBlendShapes = _pydna.DataLayer_AllWithoutBlendShapes
DataLayer_All = _pydna.DataLayer_All
Archetype_asian = _pydna.Archetype_asian
Archetype_black = _pydna.Archetype_black
Archetype_caucasian = _pydna.Archetype_caucasian
Archetype_hispanic = _pydna.Archetype_hispanic
Archetype_alien = _pydna.Archetype_alien
Archetype_other = _pydna.Archetype_other
Gender_male = _pydna.Gender_male
Gender_female = _pydna.Gender_female
Gender_other = _pydna.Gender_other
TranslationUnit_cm = _pydna.TranslationUnit_cm
TranslationUnit_m = _pydna.TranslationUnit_m
RotationUnit_degrees = _pydna.RotationUnit_degrees
RotationUnit_radians = _pydna.RotationUnit_radians
Direction_left = _pydna.Direction_left
Direction_right = _pydna.Direction_right
Direction_up = _pydna.Direction_up
Direction_down = _pydna.Direction_down
Direction_front = _pydna.Direction_front
Direction_back = _pydna.Direction_back
class CoordinateSystem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateSystem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xAxis"] = _pydna.CoordinateSystem_xAxis_set
    __swig_getmethods__["xAxis"] = _pydna.CoordinateSystem_xAxis_get
    if _newclass:
        xAxis = _swig_property(_pydna.CoordinateSystem_xAxis_get, _pydna.CoordinateSystem_xAxis_set)
    __swig_setmethods__["yAxis"] = _pydna.CoordinateSystem_yAxis_set
    __swig_getmethods__["yAxis"] = _pydna.CoordinateSystem_yAxis_get
    if _newclass:
        yAxis = _swig_property(_pydna.CoordinateSystem_yAxis_get, _pydna.CoordinateSystem_yAxis_set)
    __swig_setmethods__["zAxis"] = _pydna.CoordinateSystem_zAxis_set
    __swig_getmethods__["zAxis"] = _pydna.CoordinateSystem_zAxis_get
    if _newclass:
        zAxis = _swig_property(_pydna.CoordinateSystem_zAxis_get, _pydna.CoordinateSystem_zAxis_set)

    def __init__(self):
        this = _pydna.new_CoordinateSystem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pydna.delete_CoordinateSystem
    __del__ = lambda self: None
CoordinateSystem_swigregister = _pydna.CoordinateSystem_swigregister
CoordinateSystem_swigregister(CoordinateSystem)

class DescriptorReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DescriptorReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DescriptorReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getName(self):
        return _pydna.DescriptorReader_getName(self)

    def getArchetype(self):
        return _pydna.DescriptorReader_getArchetype(self)

    def getGender(self):
        return _pydna.DescriptorReader_getGender(self)

    def getAge(self):
        return _pydna.DescriptorReader_getAge(self)

    def getMetaDataCount(self):
        return _pydna.DescriptorReader_getMetaDataCount(self)

    def getMetaDataKey(self, index):
        return _pydna.DescriptorReader_getMetaDataKey(self, index)

    def getMetaDataValue(self, key):
        return _pydna.DescriptorReader_getMetaDataValue(self, key)

    def getTranslationUnit(self):
        return _pydna.DescriptorReader_getTranslationUnit(self)

    def getRotationUnit(self):
        return _pydna.DescriptorReader_getRotationUnit(self)

    def getCoordinateSystem(self):
        return _pydna.DescriptorReader_getCoordinateSystem(self)

    def getLODCount(self):
        return _pydna.DescriptorReader_getLODCount(self)

    def getDBMaxLOD(self):
        return _pydna.DescriptorReader_getDBMaxLOD(self)

    def getDBComplexity(self):
        return _pydna.DescriptorReader_getDBComplexity(self)

    def getDBName(self):
        return _pydna.DescriptorReader_getDBName(self)
DescriptorReader_swigregister = _pydna.DescriptorReader_swigregister
DescriptorReader_swigregister(DescriptorReader)

class MeshBlendShapeChannelMapping(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshBlendShapeChannelMapping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshBlendShapeChannelMapping, name)
    __repr__ = _swig_repr
    __swig_setmethods__["meshIndex"] = _pydna.MeshBlendShapeChannelMapping_meshIndex_set
    __swig_getmethods__["meshIndex"] = _pydna.MeshBlendShapeChannelMapping_meshIndex_get
    if _newclass:
        meshIndex = _swig_property(_pydna.MeshBlendShapeChannelMapping_meshIndex_get, _pydna.MeshBlendShapeChannelMapping_meshIndex_set)
    __swig_setmethods__["blendShapeChannelIndex"] = _pydna.MeshBlendShapeChannelMapping_blendShapeChannelIndex_set
    __swig_getmethods__["blendShapeChannelIndex"] = _pydna.MeshBlendShapeChannelMapping_blendShapeChannelIndex_get
    if _newclass:
        blendShapeChannelIndex = _swig_property(_pydna.MeshBlendShapeChannelMapping_blendShapeChannelIndex_get, _pydna.MeshBlendShapeChannelMapping_blendShapeChannelIndex_set)

    def __init__(self):
        this = _pydna.new_MeshBlendShapeChannelMapping()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pydna.delete_MeshBlendShapeChannelMapping
    __del__ = lambda self: None
MeshBlendShapeChannelMapping_swigregister = _pydna.MeshBlendShapeChannelMapping_swigregister
MeshBlendShapeChannelMapping_swigregister(MeshBlendShapeChannelMapping)

class DefinitionReader(DescriptorReader):
    __swig_setmethods__ = {}
    for _s in [DescriptorReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefinitionReader, name, value)
    __swig_getmethods__ = {}
    for _s in [DescriptorReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefinitionReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getGUIControlCount(self):
        return _pydna.DefinitionReader_getGUIControlCount(self)

    def getGUIControlName(self, index):
        return _pydna.DefinitionReader_getGUIControlName(self, index)

    def getRawControlCount(self):
        return _pydna.DefinitionReader_getRawControlCount(self)

    def getRawControlName(self, index):
        return _pydna.DefinitionReader_getRawControlName(self, index)

    def getJointCount(self):
        return _pydna.DefinitionReader_getJointCount(self)

    def getJointName(self, index):
        return _pydna.DefinitionReader_getJointName(self, index)

    def getJointIndexListCount(self):
        return _pydna.DefinitionReader_getJointIndexListCount(self)

    def getJointIndicesForLOD(self, lod):
        return _pydna.DefinitionReader_getJointIndicesForLOD(self, lod)

    def getJointParentIndex(self, index):
        return _pydna.DefinitionReader_getJointParentIndex(self, index)

    def getBlendShapeChannelCount(self):
        return _pydna.DefinitionReader_getBlendShapeChannelCount(self)

    def getBlendShapeChannelName(self, index):
        return _pydna.DefinitionReader_getBlendShapeChannelName(self, index)

    def getBlendShapeChannelIndexListCount(self):
        return _pydna.DefinitionReader_getBlendShapeChannelIndexListCount(self)

    def getBlendShapeChannelIndicesForLOD(self, lod):
        return _pydna.DefinitionReader_getBlendShapeChannelIndicesForLOD(self, lod)

    def getAnimatedMapCount(self):
        return _pydna.DefinitionReader_getAnimatedMapCount(self)

    def getAnimatedMapName(self, index):
        return _pydna.DefinitionReader_getAnimatedMapName(self, index)

    def getAnimatedMapIndexListCount(self):
        return _pydna.DefinitionReader_getAnimatedMapIndexListCount(self)

    def getAnimatedMapIndicesForLOD(self, lod):
        return _pydna.DefinitionReader_getAnimatedMapIndicesForLOD(self, lod)

    def getMeshCount(self):
        return _pydna.DefinitionReader_getMeshCount(self)

    def getMeshName(self, index):
        return _pydna.DefinitionReader_getMeshName(self, index)

    def getMeshIndexListCount(self):
        return _pydna.DefinitionReader_getMeshIndexListCount(self)

    def getMeshIndicesForLOD(self, lod):
        return _pydna.DefinitionReader_getMeshIndicesForLOD(self, lod)

    def getMeshBlendShapeChannelMappingCount(self):
        return _pydna.DefinitionReader_getMeshBlendShapeChannelMappingCount(self)

    def getMeshBlendShapeChannelMapping(self, index):
        return _pydna.DefinitionReader_getMeshBlendShapeChannelMapping(self, index)

    def getMeshBlendShapeChannelMappingIndicesForLOD(self, lod):
        return _pydna.DefinitionReader_getMeshBlendShapeChannelMappingIndicesForLOD(self, lod)

    def getNeutralJointTranslation(self, index):
        return _pydna.DefinitionReader_getNeutralJointTranslation(self, index)

    def getNeutralJointTranslationXs(self):
        return _pydna.DefinitionReader_getNeutralJointTranslationXs(self)

    def getNeutralJointTranslationYs(self):
        return _pydna.DefinitionReader_getNeutralJointTranslationYs(self)

    def getNeutralJointTranslationZs(self):
        return _pydna.DefinitionReader_getNeutralJointTranslationZs(self)

    def getNeutralJointRotation(self, index):
        return _pydna.DefinitionReader_getNeutralJointRotation(self, index)

    def getNeutralJointRotationXs(self):
        return _pydna.DefinitionReader_getNeutralJointRotationXs(self)

    def getNeutralJointRotationYs(self):
        return _pydna.DefinitionReader_getNeutralJointRotationYs(self)

    def getNeutralJointRotationZs(self):
        return _pydna.DefinitionReader_getNeutralJointRotationZs(self)
DefinitionReader_swigregister = _pydna.DefinitionReader_swigregister
DefinitionReader_swigregister(DefinitionReader)

class BehaviorReader(DefinitionReader):
    __swig_setmethods__ = {}
    for _s in [DefinitionReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BehaviorReader, name, value)
    __swig_getmethods__ = {}
    for _s in [DefinitionReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BehaviorReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getGUIToRawInputIndices(self):
        return _pydna.BehaviorReader_getGUIToRawInputIndices(self)

    def getGUIToRawOutputIndices(self):
        return _pydna.BehaviorReader_getGUIToRawOutputIndices(self)

    def getGUIToRawFromValues(self):
        return _pydna.BehaviorReader_getGUIToRawFromValues(self)

    def getGUIToRawToValues(self):
        return _pydna.BehaviorReader_getGUIToRawToValues(self)

    def getGUIToRawSlopeValues(self):
        return _pydna.BehaviorReader_getGUIToRawSlopeValues(self)

    def getGUIToRawCutValues(self):
        return _pydna.BehaviorReader_getGUIToRawCutValues(self)

    def getPSDCount(self):
        return _pydna.BehaviorReader_getPSDCount(self)

    def getPSDRowIndices(self):
        return _pydna.BehaviorReader_getPSDRowIndices(self)

    def getPSDColumnIndices(self):
        return _pydna.BehaviorReader_getPSDColumnIndices(self)

    def getPSDValues(self):
        return _pydna.BehaviorReader_getPSDValues(self)

    def getJointRowCount(self):
        return _pydna.BehaviorReader_getJointRowCount(self)

    def getJointColumnCount(self):
        return _pydna.BehaviorReader_getJointColumnCount(self)

    def getJointVariableAttributeIndices(self, lod):
        return _pydna.BehaviorReader_getJointVariableAttributeIndices(self, lod)

    def getJointGroupCount(self):
        return _pydna.BehaviorReader_getJointGroupCount(self)

    def getJointGroupLODs(self, jointGroupIndex):
        return _pydna.BehaviorReader_getJointGroupLODs(self, jointGroupIndex)

    def getJointGroupInputIndices(self, jointGroupIndex):
        return _pydna.BehaviorReader_getJointGroupInputIndices(self, jointGroupIndex)

    def getJointGroupOutputIndices(self, jointGroupIndex):
        return _pydna.BehaviorReader_getJointGroupOutputIndices(self, jointGroupIndex)

    def getJointGroupValues(self, jointGroupIndex):
        return _pydna.BehaviorReader_getJointGroupValues(self, jointGroupIndex)

    def getJointGroupJointIndices(self, jointGroupIndex):
        return _pydna.BehaviorReader_getJointGroupJointIndices(self, jointGroupIndex)

    def getBlendShapeChannelLODs(self):
        return _pydna.BehaviorReader_getBlendShapeChannelLODs(self)

    def getBlendShapeChannelInputIndices(self):
        return _pydna.BehaviorReader_getBlendShapeChannelInputIndices(self)

    def getBlendShapeChannelOutputIndices(self):
        return _pydna.BehaviorReader_getBlendShapeChannelOutputIndices(self)

    def getAnimatedMapLODs(self):
        return _pydna.BehaviorReader_getAnimatedMapLODs(self)

    def getAnimatedMapInputIndices(self):
        return _pydna.BehaviorReader_getAnimatedMapInputIndices(self)

    def getAnimatedMapOutputIndices(self):
        return _pydna.BehaviorReader_getAnimatedMapOutputIndices(self)

    def getAnimatedMapFromValues(self):
        return _pydna.BehaviorReader_getAnimatedMapFromValues(self)

    def getAnimatedMapToValues(self):
        return _pydna.BehaviorReader_getAnimatedMapToValues(self)

    def getAnimatedMapSlopeValues(self):
        return _pydna.BehaviorReader_getAnimatedMapSlopeValues(self)

    def getAnimatedMapCutValues(self):
        return _pydna.BehaviorReader_getAnimatedMapCutValues(self)
BehaviorReader_swigregister = _pydna.BehaviorReader_swigregister
BehaviorReader_swigregister(BehaviorReader)

class GeometryReader(DefinitionReader):
    __swig_setmethods__ = {}
    for _s in [DefinitionReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryReader, name, value)
    __swig_getmethods__ = {}
    for _s in [DefinitionReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getVertexPositionCount(self, meshIndex):
        return _pydna.GeometryReader_getVertexPositionCount(self, meshIndex)

    def getVertexPosition(self, meshIndex, vertexIndex):
        return _pydna.GeometryReader_getVertexPosition(self, meshIndex, vertexIndex)

    def getVertexPositionXs(self, meshIndex):
        return _pydna.GeometryReader_getVertexPositionXs(self, meshIndex)

    def getVertexPositionYs(self, meshIndex):
        return _pydna.GeometryReader_getVertexPositionYs(self, meshIndex)

    def getVertexPositionZs(self, meshIndex):
        return _pydna.GeometryReader_getVertexPositionZs(self, meshIndex)

    def getVertexTextureCoordinateCount(self, meshIndex):
        return _pydna.GeometryReader_getVertexTextureCoordinateCount(self, meshIndex)

    def getVertexTextureCoordinate(self, meshIndex, textureCoordinateIndex):
        return _pydna.GeometryReader_getVertexTextureCoordinate(self, meshIndex, textureCoordinateIndex)

    def getVertexTextureCoordinateUs(self, meshIndex):
        return _pydna.GeometryReader_getVertexTextureCoordinateUs(self, meshIndex)

    def getVertexTextureCoordinateVs(self, meshIndex):
        return _pydna.GeometryReader_getVertexTextureCoordinateVs(self, meshIndex)

    def getVertexNormalCount(self, meshIndex):
        return _pydna.GeometryReader_getVertexNormalCount(self, meshIndex)

    def getVertexNormal(self, meshIndex, normalIndex):
        return _pydna.GeometryReader_getVertexNormal(self, meshIndex, normalIndex)

    def getVertexNormalXs(self, meshIndex):
        return _pydna.GeometryReader_getVertexNormalXs(self, meshIndex)

    def getVertexNormalYs(self, meshIndex):
        return _pydna.GeometryReader_getVertexNormalYs(self, meshIndex)

    def getVertexNormalZs(self, meshIndex):
        return _pydna.GeometryReader_getVertexNormalZs(self, meshIndex)

    def getVertexLayoutCount(self, meshIndex):
        return _pydna.GeometryReader_getVertexLayoutCount(self, meshIndex)

    def getVertexLayout(self, meshIndex, layoutIndex):
        return _pydna.GeometryReader_getVertexLayout(self, meshIndex, layoutIndex)

    def getVertexLayoutPositionIndices(self, meshIndex):
        return _pydna.GeometryReader_getVertexLayoutPositionIndices(self, meshIndex)

    def getVertexLayoutTextureCoordinateIndices(self, meshIndex):
        return _pydna.GeometryReader_getVertexLayoutTextureCoordinateIndices(self, meshIndex)

    def getVertexLayoutNormalIndices(self, meshIndex):
        return _pydna.GeometryReader_getVertexLayoutNormalIndices(self, meshIndex)

    def getFaceCount(self, meshIndex):
        return _pydna.GeometryReader_getFaceCount(self, meshIndex)

    def getFaceVertexLayoutIndices(self, meshIndex, faceIndex):
        return _pydna.GeometryReader_getFaceVertexLayoutIndices(self, meshIndex, faceIndex)

    def getMaximumInfluencePerVertex(self, meshIndex):
        return _pydna.GeometryReader_getMaximumInfluencePerVertex(self, meshIndex)

    def getSkinWeightsCount(self, meshIndex):
        return _pydna.GeometryReader_getSkinWeightsCount(self, meshIndex)

    def getSkinWeightsValues(self, meshIndex, vertexIndex):
        return _pydna.GeometryReader_getSkinWeightsValues(self, meshIndex, vertexIndex)

    def getSkinWeightsJointIndices(self, meshIndex, vertexIndex):
        return _pydna.GeometryReader_getSkinWeightsJointIndices(self, meshIndex, vertexIndex)

    def getBlendShapeTargetCount(self, meshIndex):
        return _pydna.GeometryReader_getBlendShapeTargetCount(self, meshIndex)

    def getBlendShapeChannelIndex(self, meshIndex, blendShapeTargetIndex):
        return _pydna.GeometryReader_getBlendShapeChannelIndex(self, meshIndex, blendShapeTargetIndex)

    def getBlendShapeTargetDeltaCount(self, meshIndex, blendShapeTargetIndex):
        return _pydna.GeometryReader_getBlendShapeTargetDeltaCount(self, meshIndex, blendShapeTargetIndex)

    def getBlendShapeTargetDelta(self, meshIndex, blendShapeTargetIndex, deltaIndex):
        return _pydna.GeometryReader_getBlendShapeTargetDelta(self, meshIndex, blendShapeTargetIndex, deltaIndex)

    def getBlendShapeTargetDeltaXs(self, meshIndex, blendShapeTargetIndex):
        return _pydna.GeometryReader_getBlendShapeTargetDeltaXs(self, meshIndex, blendShapeTargetIndex)

    def getBlendShapeTargetDeltaYs(self, meshIndex, blendShapeTargetIndex):
        return _pydna.GeometryReader_getBlendShapeTargetDeltaYs(self, meshIndex, blendShapeTargetIndex)

    def getBlendShapeTargetDeltaZs(self, meshIndex, blendShapeTargetIndex):
        return _pydna.GeometryReader_getBlendShapeTargetDeltaZs(self, meshIndex, blendShapeTargetIndex)

    def getBlendShapeTargetVertexIndices(self, meshIndex, blendShapeTargetIndex):
        return _pydna.GeometryReader_getBlendShapeTargetVertexIndices(self, meshIndex, blendShapeTargetIndex)
GeometryReader_swigregister = _pydna.GeometryReader_swigregister
GeometryReader_swigregister(GeometryReader)

class Reader(BehaviorReader, GeometryReader):
    __swig_setmethods__ = {}
    for _s in [BehaviorReader, GeometryReader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Reader, name, value)
    __swig_getmethods__ = {}
    for _s in [BehaviorReader, GeometryReader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Reader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydna.delete_Reader
    __del__ = lambda self: None
Reader_swigregister = _pydna.Reader_swigregister
Reader_swigregister(Reader)

class StreamReader(Reader):
    __swig_setmethods__ = {}
    for _s in [Reader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamReader, name, value)
    __swig_getmethods__ = {}
    for _s in [Reader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamReader, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pydna.StreamReader_create)
    else:
        create = _pydna.StreamReader_create
    if _newclass:
        destroy = staticmethod(_pydna.StreamReader_destroy)
    else:
        destroy = _pydna.StreamReader_destroy
    __swig_destroy__ = _pydna.delete_StreamReader
    __del__ = lambda self: None

    def read(self):
        return _pydna.StreamReader_read(self)
StreamReader_swigregister = _pydna.StreamReader_swigregister
StreamReader_swigregister(StreamReader)
StreamReader.SignatureMismatchError = _pydna.cvar.StreamReader_SignatureMismatchError
StreamReader.VersionMismatchError = _pydna.cvar.StreamReader_VersionMismatchError
StreamReader.InvalidDataError = _pydna.cvar.StreamReader_InvalidDataError

def StreamReader_create(*args):
    return _pydna.StreamReader_create(*args)
StreamReader_create = _pydna.StreamReader_create

def StreamReader_destroy(instance):
    return _pydna.StreamReader_destroy(instance)
StreamReader_destroy = _pydna.StreamReader_destroy


StreamReader.__new__= staticmethod(lambda cls, *args, **kwargs: StreamReader_create(*args, **kwargs))
StreamReader.__del__= lambda instance: StreamReader_destroy(instance)
StreamReader.__init__ = __managed_init
del StreamReader.create
del StreamReader.destroy

class DescriptorWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DescriptorWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DescriptorWriter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setName(self, name):
        return _pydna.DescriptorWriter_setName(self, name)

    def setArchetype(self, archetype):
        return _pydna.DescriptorWriter_setArchetype(self, archetype)

    def setGender(self, gender):
        return _pydna.DescriptorWriter_setGender(self, gender)

    def setAge(self, age):
        return _pydna.DescriptorWriter_setAge(self, age)

    def clearMetaData(self):
        return _pydna.DescriptorWriter_clearMetaData(self)

    def setMetaData(self, key, value):
        return _pydna.DescriptorWriter_setMetaData(self, key, value)

    def setTranslationUnit(self, unit):
        return _pydna.DescriptorWriter_setTranslationUnit(self, unit)

    def setRotationUnit(self, unit):
        return _pydna.DescriptorWriter_setRotationUnit(self, unit)

    def setCoordinateSystem(self, system):
        return _pydna.DescriptorWriter_setCoordinateSystem(self, system)

    def setLODCount(self, lodCount):
        return _pydna.DescriptorWriter_setLODCount(self, lodCount)

    def setDBMaxLOD(self, lod):
        return _pydna.DescriptorWriter_setDBMaxLOD(self, lod)

    def setDBComplexity(self, name):
        return _pydna.DescriptorWriter_setDBComplexity(self, name)

    def setDBName(self, name):
        return _pydna.DescriptorWriter_setDBName(self, name)
DescriptorWriter_swigregister = _pydna.DescriptorWriter_swigregister
DescriptorWriter_swigregister(DescriptorWriter)

class DefinitionWriter(DescriptorWriter):
    __swig_setmethods__ = {}
    for _s in [DescriptorWriter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefinitionWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [DescriptorWriter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DefinitionWriter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clearGUIControlNames(self):
        return _pydna.DefinitionWriter_clearGUIControlNames(self)

    def setGUIControlName(self, index, name):
        return _pydna.DefinitionWriter_setGUIControlName(self, index, name)

    def clearRawControlNames(self):
        return _pydna.DefinitionWriter_clearRawControlNames(self)

    def setRawControlName(self, index, name):
        return _pydna.DefinitionWriter_setRawControlName(self, index, name)

    def clearJointNames(self):
        return _pydna.DefinitionWriter_clearJointNames(self)

    def setJointName(self, index, name):
        return _pydna.DefinitionWriter_setJointName(self, index, name)

    def clearJointIndices(self):
        return _pydna.DefinitionWriter_clearJointIndices(self)

    def setJointIndices(self, index, jointIndices):
        return _pydna.DefinitionWriter_setJointIndices(self, index, jointIndices)

    def clearLODJointMappings(self):
        return _pydna.DefinitionWriter_clearLODJointMappings(self)

    def setLODJointMapping(self, lod, index):
        return _pydna.DefinitionWriter_setLODJointMapping(self, lod, index)

    def clearBlendShapeChannelNames(self):
        return _pydna.DefinitionWriter_clearBlendShapeChannelNames(self)

    def setBlendShapeChannelName(self, index, name):
        return _pydna.DefinitionWriter_setBlendShapeChannelName(self, index, name)

    def clearBlendShapeChannelIndices(self):
        return _pydna.DefinitionWriter_clearBlendShapeChannelIndices(self)

    def setBlendShapeChannelIndices(self, index, blendShapeChannelIndices):
        return _pydna.DefinitionWriter_setBlendShapeChannelIndices(self, index, blendShapeChannelIndices)

    def clearLODBlendShapeChannelMappings(self):
        return _pydna.DefinitionWriter_clearLODBlendShapeChannelMappings(self)

    def setLODBlendShapeChannelMapping(self, lod, index):
        return _pydna.DefinitionWriter_setLODBlendShapeChannelMapping(self, lod, index)

    def clearAnimatedMapNames(self):
        return _pydna.DefinitionWriter_clearAnimatedMapNames(self)

    def setAnimatedMapName(self, index, name):
        return _pydna.DefinitionWriter_setAnimatedMapName(self, index, name)

    def clearAnimatedMapIndices(self):
        return _pydna.DefinitionWriter_clearAnimatedMapIndices(self)

    def setAnimatedMapIndices(self, index, animatedMapIndices):
        return _pydna.DefinitionWriter_setAnimatedMapIndices(self, index, animatedMapIndices)

    def clearLODAnimatedMapMappings(self):
        return _pydna.DefinitionWriter_clearLODAnimatedMapMappings(self)

    def setLODAnimatedMapMapping(self, lod, index):
        return _pydna.DefinitionWriter_setLODAnimatedMapMapping(self, lod, index)

    def clearMeshNames(self):
        return _pydna.DefinitionWriter_clearMeshNames(self)

    def setMeshName(self, index, name):
        return _pydna.DefinitionWriter_setMeshName(self, index, name)

    def clearMeshIndices(self):
        return _pydna.DefinitionWriter_clearMeshIndices(self)

    def setMeshIndices(self, index, meshIndices):
        return _pydna.DefinitionWriter_setMeshIndices(self, index, meshIndices)

    def clearLODMeshMappings(self):
        return _pydna.DefinitionWriter_clearLODMeshMappings(self)

    def setLODMeshMapping(self, lod, index):
        return _pydna.DefinitionWriter_setLODMeshMapping(self, lod, index)

    def clearMeshBlendShapeChannelMappings(self):
        return _pydna.DefinitionWriter_clearMeshBlendShapeChannelMappings(self)

    def setMeshBlendShapeChannelMapping(self, index, meshIndex, blendShapeChannelIndex):
        return _pydna.DefinitionWriter_setMeshBlendShapeChannelMapping(self, index, meshIndex, blendShapeChannelIndex)

    def setJointHierarchy(self, jointIndices):
        return _pydna.DefinitionWriter_setJointHierarchy(self, jointIndices)

    def setNeutralJointTranslations(self, translations):
        return _pydna.DefinitionWriter_setNeutralJointTranslations(self, translations)

    def setNeutralJointRotations(self, rotations):
        return _pydna.DefinitionWriter_setNeutralJointRotations(self, rotations)
DefinitionWriter_swigregister = _pydna.DefinitionWriter_swigregister
DefinitionWriter_swigregister(DefinitionWriter)

class BehaviorWriter(DefinitionWriter):
    __swig_setmethods__ = {}
    for _s in [DefinitionWriter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BehaviorWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [DefinitionWriter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BehaviorWriter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setGUIToRawInputIndices(self, inputIndices):
        return _pydna.BehaviorWriter_setGUIToRawInputIndices(self, inputIndices)

    def setGUIToRawOutputIndices(self, outputIndices):
        return _pydna.BehaviorWriter_setGUIToRawOutputIndices(self, outputIndices)

    def setGUIToRawFromValues(self, fromValues):
        return _pydna.BehaviorWriter_setGUIToRawFromValues(self, fromValues)

    def setGUIToRawToValues(self, toValues):
        return _pydna.BehaviorWriter_setGUIToRawToValues(self, toValues)

    def setGUIToRawSlopeValues(self, slopeValues):
        return _pydna.BehaviorWriter_setGUIToRawSlopeValues(self, slopeValues)

    def setGUIToRawCutValues(self, cutValues):
        return _pydna.BehaviorWriter_setGUIToRawCutValues(self, cutValues)

    def setPSDCount(self, count):
        return _pydna.BehaviorWriter_setPSDCount(self, count)

    def setPSDRowIndices(self, rowIndices):
        return _pydna.BehaviorWriter_setPSDRowIndices(self, rowIndices)

    def setPSDColumnIndices(self, columnIndices):
        return _pydna.BehaviorWriter_setPSDColumnIndices(self, columnIndices)

    def setPSDValues(self, weights):
        return _pydna.BehaviorWriter_setPSDValues(self, weights)

    def setJointRowCount(self, rowCount):
        return _pydna.BehaviorWriter_setJointRowCount(self, rowCount)

    def setJointColumnCount(self, columnCount):
        return _pydna.BehaviorWriter_setJointColumnCount(self, columnCount)

    def clearJointGroups(self):
        return _pydna.BehaviorWriter_clearJointGroups(self)

    def deleteJointGroup(self, jointGroupIndex):
        return _pydna.BehaviorWriter_deleteJointGroup(self, jointGroupIndex)

    def setJointGroupLODs(self, jointGroupIndex, lods):
        return _pydna.BehaviorWriter_setJointGroupLODs(self, jointGroupIndex, lods)

    def setJointGroupInputIndices(self, jointGroupIndex, inputIndices):
        return _pydna.BehaviorWriter_setJointGroupInputIndices(self, jointGroupIndex, inputIndices)

    def setJointGroupOutputIndices(self, jointGroupIndex, outputIndices):
        return _pydna.BehaviorWriter_setJointGroupOutputIndices(self, jointGroupIndex, outputIndices)

    def setJointGroupValues(self, jointGroupIndex, values):
        return _pydna.BehaviorWriter_setJointGroupValues(self, jointGroupIndex, values)

    def setJointGroupJointIndices(self, jointGroupIndex, jointIndices):
        return _pydna.BehaviorWriter_setJointGroupJointIndices(self, jointGroupIndex, jointIndices)

    def setBlendShapeChannelLODs(self, lods):
        return _pydna.BehaviorWriter_setBlendShapeChannelLODs(self, lods)

    def setBlendShapeChannelInputIndices(self, inputIndices):
        return _pydna.BehaviorWriter_setBlendShapeChannelInputIndices(self, inputIndices)

    def setBlendShapeChannelOutputIndices(self, outputIndices):
        return _pydna.BehaviorWriter_setBlendShapeChannelOutputIndices(self, outputIndices)

    def setAnimatedMapLODs(self, lods):
        return _pydna.BehaviorWriter_setAnimatedMapLODs(self, lods)

    def setAnimatedMapInputIndices(self, inputIndices):
        return _pydna.BehaviorWriter_setAnimatedMapInputIndices(self, inputIndices)

    def setAnimatedMapOutputIndices(self, outputIndices):
        return _pydna.BehaviorWriter_setAnimatedMapOutputIndices(self, outputIndices)

    def setAnimatedMapFromValues(self, fromValues):
        return _pydna.BehaviorWriter_setAnimatedMapFromValues(self, fromValues)

    def setAnimatedMapToValues(self, toValues):
        return _pydna.BehaviorWriter_setAnimatedMapToValues(self, toValues)

    def setAnimatedMapSlopeValues(self, slopeValues):
        return _pydna.BehaviorWriter_setAnimatedMapSlopeValues(self, slopeValues)

    def setAnimatedMapCutValues(self, cutValues):
        return _pydna.BehaviorWriter_setAnimatedMapCutValues(self, cutValues)
BehaviorWriter_swigregister = _pydna.BehaviorWriter_swigregister
BehaviorWriter_swigregister(BehaviorWriter)

class GeometryWriter(DefinitionWriter):
    __swig_setmethods__ = {}
    for _s in [DefinitionWriter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [DefinitionWriter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryWriter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clearMeshes(self):
        return _pydna.GeometryWriter_clearMeshes(self)

    def deleteMesh(self, meshIndex):
        return _pydna.GeometryWriter_deleteMesh(self, meshIndex)

    def setVertexPositions(self, meshIndex, positions):
        return _pydna.GeometryWriter_setVertexPositions(self, meshIndex, positions)

    def setVertexTextureCoordinates(self, meshIndex, textureCoordinates):
        return _pydna.GeometryWriter_setVertexTextureCoordinates(self, meshIndex, textureCoordinates)

    def setVertexNormals(self, meshIndex, normals):
        return _pydna.GeometryWriter_setVertexNormals(self, meshIndex, normals)

    def setVertexLayouts(self, meshIndex, layouts):
        return _pydna.GeometryWriter_setVertexLayouts(self, meshIndex, layouts)

    def clearFaceVertexLayoutIndices(self, meshIndex):
        return _pydna.GeometryWriter_clearFaceVertexLayoutIndices(self, meshIndex)

    def setFaceVertexLayoutIndices(self, meshIndex, faceIndex, layoutIndices):
        return _pydna.GeometryWriter_setFaceVertexLayoutIndices(self, meshIndex, faceIndex, layoutIndices)

    def setMaximumInfluencePerVertex(self, meshIndex, maxInfluenceCount):
        return _pydna.GeometryWriter_setMaximumInfluencePerVertex(self, meshIndex, maxInfluenceCount)

    def clearSkinWeights(self, meshIndex):
        return _pydna.GeometryWriter_clearSkinWeights(self, meshIndex)

    def setSkinWeightsValues(self, meshIndex, vertexIndex, weights):
        return _pydna.GeometryWriter_setSkinWeightsValues(self, meshIndex, vertexIndex, weights)

    def setSkinWeightsJointIndices(self, meshIndex, vertexIndex, jointIndices):
        return _pydna.GeometryWriter_setSkinWeightsJointIndices(self, meshIndex, vertexIndex, jointIndices)

    def clearBlendShapeTargets(self, meshIndex):
        return _pydna.GeometryWriter_clearBlendShapeTargets(self, meshIndex)

    def setBlendShapeChannelIndex(self, meshIndex, blendShapeTargetIndex, blendShapeChannelIndex):
        return _pydna.GeometryWriter_setBlendShapeChannelIndex(self, meshIndex, blendShapeTargetIndex, blendShapeChannelIndex)

    def setBlendShapeTargetDeltas(self, meshIndex, blendShapeTargetIndex, deltas):
        return _pydna.GeometryWriter_setBlendShapeTargetDeltas(self, meshIndex, blendShapeTargetIndex, deltas)

    def setBlendShapeTargetVertexIndices(self, meshIndex, blendShapeTargetIndex, vertexIndices):
        return _pydna.GeometryWriter_setBlendShapeTargetVertexIndices(self, meshIndex, blendShapeTargetIndex, vertexIndices)
GeometryWriter_swigregister = _pydna.GeometryWriter_swigregister
GeometryWriter_swigregister(GeometryWriter)

class Writer(BehaviorWriter, GeometryWriter):
    __swig_setmethods__ = {}
    for _s in [BehaviorWriter, GeometryWriter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Writer, name, value)
    __swig_getmethods__ = {}
    for _s in [BehaviorWriter, GeometryWriter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Writer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydna.delete_Writer
    __del__ = lambda self: None

    def setFrom(self, *args):
        return _pydna.Writer_setFrom(self, *args)
Writer_swigregister = _pydna.Writer_swigregister
Writer_swigregister(Writer)

class StreamWriter(Writer):
    __swig_setmethods__ = {}
    for _s in [Writer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StreamWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [Writer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StreamWriter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_pydna.StreamWriter_create)
    else:
        create = _pydna.StreamWriter_create
    if _newclass:
        destroy = staticmethod(_pydna.StreamWriter_destroy)
    else:
        destroy = _pydna.StreamWriter_destroy
    __swig_destroy__ = _pydna.delete_StreamWriter
    __del__ = lambda self: None

    def write(self):
        return _pydna.StreamWriter_write(self)
StreamWriter_swigregister = _pydna.StreamWriter_swigregister
StreamWriter_swigregister(StreamWriter)

def StreamWriter_create(stream, memRes=None):
    return _pydna.StreamWriter_create(stream, memRes)
StreamWriter_create = _pydna.StreamWriter_create

def StreamWriter_destroy(instance):
    return _pydna.StreamWriter_destroy(instance)
StreamWriter_destroy = _pydna.StreamWriter_destroy


StreamWriter.__new__= staticmethod(lambda cls, *args, **kwargs: StreamWriter_create(*args, **kwargs))
StreamWriter.__del__= lambda instance: StreamWriter_destroy(instance)
StreamWriter.__init__ = __managed_init
del StreamWriter.create
del StreamWriter.destroy

# This file is compatible with both classic and new-style classes.


